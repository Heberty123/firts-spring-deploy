package transacao.Controllers;

import java.util.List;
import java.util.Optional;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.CurrentSecurityContext;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import transacao.DAO.RequestCadastro;
import transacao.Models.Role;
import transacao.Models.Usuario;
import transacao.Repositories.RepositoryUser;
import transacao.Service.Check;
import transacao.Service.EmailSenderService;
import transacao.Service.Senha;

@Controller
public class LoginController {
	
	@Autowired
	private RepositoryUser repositoryUser;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private EmailSenderService senderService;
	
	
	@RequestMapping("/login")
	public String login() throws Exception {
		return "Autenticacao/login.html";
	}
	
	
	@RequestMapping("/cadastrar")
	public ModelAndView Cadastro(RequestCadastro req) {
		return new ModelAndView("Autenticacao/cadastro.html");
	}
	
	
	@PostMapping("/cadastrar")
	public ModelAndView Cadastrar(@Valid RequestCadastro req) {
		ModelAndView mv = new ModelAndView("redirect:/login");
		Usuario UsernameExist = repositoryUser.findByUsername(req.getNome());
		Usuario EmailExist = repositoryUser.findByEmail(req.getEmail());
		
		if(UsernameExist != null || EmailExist != null) {
			mv = new ModelAndView("Autenticacao/cadastro.html");
			
			if(UsernameExist != null){
				mv.addObject("erroUsername", true);
			}
			if(EmailExist != null) {
				mv.addObject("erroEmail", true);
			}
			return mv;
		}
		
		
		String senha = Senha.autoGenerated(6);
		Usuario usuario = Usuario.generatedUser(req.getNome(), req.getEmail(), senha, passwordEncoder);
		this.repositoryUser.save(usuario);
	
		senderService.sendEmail(req.getEmail(), "Senha para acesso do projeto de controle de transações", "olá " + req.getNome() + " agradeço por criar conta e poder entrar e interagir no meu projeto, espero a sua opinião sobre esse trabalho ! \nSenha: " + senha);
		
		return mv;
	}
	
	
	@RequestMapping("/usuarios")
	public ModelAndView lista(@CurrentSecurityContext(expression="authentication")
    Authentication authentication) {
		ModelAndView mv = new ModelAndView("Autenticacao/usuarios.html");
		List<Usuario> usuarios = this.repositoryUser.findAllWithoutPatternAndLogged(authentication.getName());
		
		mv.addObject("usuarios", usuarios);
		
		return mv;
	}
	
	
	@RequestMapping("/delete/user/{id}")
	public ModelAndView delete(@PathVariable Long id) {
		ModelAndView mv = new ModelAndView("redirect:/usuarios");
		Optional<Usuario> optional = this.repositoryUser.findById(id);
		Usuario usuario = optional.get();
		usuario.setUsername(null);
		usuario.setEmail(null);
		usuario.setPassword(null);
		this.repositoryUser.save(usuario);

		return mv;
	}


	@RequestMapping("/edit/user/{id}")
	public ModelAndView edit(@PathVariable Long id, RequestCadastro req) {
		ModelAndView mv = new ModelAndView("Autenticacao/formEdit.html");
		Optional<Usuario> optional = this.repositoryUser.findById(id);
		Usuario usuario = optional.get();
		mv.addObject("usuario", usuario);
		req.setNome(usuario.getUsername());
		req.setEmail(usuario.getEmail());

		return mv;
	}
	

	@PostMapping("/alterar/user/{id}")
	public ModelAndView alterar(@PathVariable Long id, @Valid RequestCadastro req) {
		ModelAndView mv = new ModelAndView("redirect:/usuarios");
		
		Usuario UsernameExist = this.repositoryUser.findByUsernameDifferentOfId(req.getNome(), id);
		Usuario EmailExist =  this.repositoryUser.findByEmailDifferentOfId(req.getEmail(), id);
		
		if(UsernameExist != null || EmailExist != null) {
			mv = new ModelAndView("Autenticacao/formEdit.html");
			Optional<Usuario> optional = this.repositoryUser.findById(id);
			Usuario user = optional.get();
			mv.addObject("usuario", user);
			
			if(UsernameExist != null){
				mv.addObject("erroUsername", true);
			}
			if(EmailExist != null) {
				mv.addObject("erroEmail", true);
			}
			return mv;
		}
		
		Optional<Usuario> optional = this.repositoryUser.findById(id);
		Usuario usuario = optional.get();
		usuario.setUsername(req.getNome());
		usuario.setNome(req.getNome());
		usuario.setEmail(req.getEmail());
		this.repositoryUser.save(usuario);

		return mv;
	}
	
	
	@RequestMapping("/forgot")
	public ModelAndView forget() {
		return new ModelAndView("Autenticacao/forget.html");
	}
	
	
	@RequestMapping("/retrieve")
	public ModelAndView retrieve(@RequestParam String email) {
		
		String senha = String.valueOf(Senha.autoGenerated(6));
	
		Usuario usuario = this.repositoryUser.findByEmail(email);
		
		if(usuario == null) {
			ModelAndView mv = new ModelAndView("Autenticacao/forget.html");
			mv.addObject("erro", true);
			mv.addObject("email", email);
			return mv;
		}
		
		usuario.setPassword(this.passwordEncoder.encode(senha));
		this.repositoryUser.save(usuario);
		
		this.senderService.sendEmail(email, "Retrieve your account with new email", "Hello\nI send here a new password that you can retrieve your account with with peace of mind !\nSenha: " + senha +" \nThankyou a lot, see you later !");
		
		return new ModelAndView("redirect:/login");
	}

}
